---

# FILE:            {{ role_path }}/defaults/main.yml
# LICENSE:         Public Domain

### NAMING & BUCKET (where to backup/restore) __________________________________
# Affect name of the backups
abr_uid: "{{ inventory_hostname_short + '-' + abr_driver_group }}" # an hostname-fs like name will be used be used
abr_bucket: ":local:/var/local/abr/bucket/" # A local bucket will be used if you don't customize
abr_prefix: "" # Without customization, no prefix will be used (Recommended configure)
abr_timestamped: false # Append TS like "__20200217T120618" to abr_uid
abr_timestamp: "{{ ansible_date_time.iso8601_basic_short }}" # Used when abr_timestamped: true; You can define one here

## Special overrides exclusive for restore mode ................................
# Define the exact UID to restore (including timestamp).
abr_restore_uid: "{{ abr_uid }}" # Change this if 'abr_timestamped: true'
abr_restore_filename: "{{ abr_uid }}" # Force filename on restore; ideal for "abr_driver: 'fs-file'"

## Restore mode, end ...........................................................
### ABR WORKFLOW _______________________________________________________________
# ABR work on 3 different modes of operation with (abr_mode: 'backup',
# 'restore', 'restore-options') and 3+ drivers (abr_driver) that translate what
# needs to backup/restore to a format it can manipulate by other steps.
# The abr_strategy_* apply transformations between the driver
# exporting/importing and where the date will be stored.

abr_mode: "restore-options"    # Options: 'backup', 'restore', 'restore-options'
abr_driver: "fs-directory" # Options: 'fs-directory', 'fs-file', 'mariadb-mydumper'
abr_strategy_encryption: null # Options: null, 'base64-default'
abr_strategy_compression: "targz-default" # Options: 'targz-default', "xz-default"
abr_strategy_conversion: null # Options: none, maybe 'sqlines'
abr_strategy_synchronization: "rclone-default"

## Paranoid mode (The full-temp-backup-before-restore) .........................
# Paranoid mode apply the 'full-temp-backup-before-restore' task and is expected
# that all abr_driver also implement some way to do a full backup of what would
# be replaced with restore. Some limitations of abr_paranoid: true
#   - It will take more time to restore
#       - While this may aceptable when restoring the main database of an server
#         if you are restoring an smaller database of a server with several ones
#         may be a good idea disable it (or be ok with some delay...)
#   - If enabled, will trigger a fail if the target does not have some data
#   - Some drivers may require full administrative privileges (like root for DBs)
#     since ABR may not able to know excatly what database or dataset is changing
#   - It will need manual clean up (if you made several restores, all restores)
#     will be on /var/local/abr/full-temp-backup-before-restore/(uid + timestamp)
#   - As ABR v0.8.0, we don't provide an automated restore for these backups.
#     They are not designed to be used normaly.
abr_paranoid: true

## Steps Skipping ..............................................................
abr_skip_setup: false
abr_skip_cleanup: false
abr_skip_maintask: false # If you want skip the abr_driver main backup/restore task.
abr_skip_encryption: false
abr_skip_compression: false
abr_skip_conversion: false
abr_skip_synchronization: false # Skip upload/download to/from the bucket

abr_bucket_enviroment: {}
# abr_bucket_enviroment:
#   RCLONE_B2_ACCOUNT: "000b3e7..."
#   RCLONE_B2_KEY: "K000pyk..."

abr_bucket_args: {}
# abr_bucket_args: {
#   '--b2-account': "000b3e7...",
#   '--b2-key': "K000pyk..."
# }



### Drivers: FS ________________________________________________________________
abr_fs_path: null
abr_fs_options: {}

# User can customize parameters for backup and restore if dont want use defaults
abr_fs_path_backup: "{{ abr_fs_path }}"
abr_fs_path_restore: "{{ abr_fs_path }}"
abr_fs_options_backup: "{{ abr_fs_options }}"
abr_fs_options_restore: "{{ abr_fs_options_restore }}"

### Drivers: MariaDB ___________________________________________________________

### Strategy/Compress: _________________________________________________________
abr_compression_format: "xz"

### ... ________________________________________________________________________

# abr role, if you have new files or custom overrides for its internal
# tasks files under overrides/roles/adhoc_backup_restore/, it will use yours
abr_overrides_directory: "{{ playbook_dir }}/overrides/roles/adhoc_backup_restore/"

### DRAFT of v0.5.0 new standard, END __________________________________________

### Most common variables to change, start _____________________________________

## Exclusive to: abr_mode: restore ............................................
# abr_restore_timestamp: "" # Example: 20200213T052730, ignore when 'abr_backup_timestamped: no'
# abr_restore_database: ""  # If you export all databases, but want import just one, use it
# abr_restore_tables: []    # If want just specific databases
# abr_restore_customrclone: ""

### Most common variables to change, end _______________________________________

# MariaDB/MySQL/Galera Cluster _________________________________________________

abr_mariadb_args: {} # if using mariadb-mydumper, defaults to backup/restore ALL databases (even system databases)
abr_mariadb_args_backup: "{{ abr_mariadb_args }}"
abr_mariadb_args_restore: "{{ abr_mariadb_args }}"

abr_mariadb_enviroment: {} # mydumper & mysqldump dont use Env vars, so this does not have effect
abr_mariadb_enviroment_backup: "{{ abr_mariadb_enviroment }}"
abr_mariadb_enviroment_restore: "{{ abr_mariadb_enviroment }}"

abr_database: null         # -B, --database: Database to dump (defalts to ALL databases, including system databases!)
abr_tables_list: ""        # --tables-list: Comma delimited table list to dump (does not exclude regex option)
abr_regex: ""              # -x, --regex: Regular expression for 'db.table' matching
abr_no_schemas: null       # -m, --no-schemas: Do not dump table schemas with the data
abr_no_data: null          # -d, --no-data: Do not dump table data

# Server to export/import
abr_dbserver_user: root     # -u, --user: Username with privileges to run the dump
abr_dbserver_password: null # -p, --password: User password
abr_dbserver_host: null     # --host: The host to connect to
abr_dbserver_port: null     # -P, --port: TCP/IP port to connect to
abr_dbserver_socket: null   # -S, --socket: UNIX domain socket file to use for connection

# For features not implemented, please use the following parameters
abr_mydumper_append: null  # String to append to mydumper shell command
abr_myloader_append: null  # String to append to myloader shell command

# RCLONE _______________________________________________________________________

# abr_rclone_bucket_type: "local"

# abr_bucket_enviroment: {}
# # abr_bucket_enviroment:
# #   RCLONE_B2_ACCOUNT: "000b3e7..."
# #   RCLONE_B2_KEY: "K000pyk..."

# abr_bucket_args: {}
# # abr_bucket_args: {
# #   '--b2-account': "000b3e7...",
# #   '--b2-key': "K000pyk..."
# # }


# Since is possible to have valt backends with different access keys to backup
# (e.g. the backup for security reason ONLY ALLOW WRITE, but not reads) and
# to restore (e.g. a key that, via human intervention, may allow list remote
# options) the user can customize both
abr_rclone_bucket_backup: "{{ abr_bucket }}"
abr_rclone_bucket_restore: "{{ abr_bucket }}"
abr_bucket_backup: "{{ abr_bucket }}"
abr_bucket_restore: "{{ abr_bucket }}"
abr_bucket_enviroment_backup: "{{ abr_bucket_enviroment }}"
abr_bucket_enviroment_restore: "{{ abr_bucket_enviroment }}"
abr_bucket_args_backup: "{{ abr_bucket_args }}"
abr_bucket_args_restore: "{{ abr_bucket_args }}"

# abr_rclone_valt_send_method: "move" # Move files from source to dest https://rclone.org/commands/rclone_move/
# abr_rclone_valt_send_method: "moveto" # Move files from source to dest https://rclone.org/commands/rclone_move/
abr_rclone_valt_send_method: "copyto" # Move files from source to dest https://rclone.org/commands/rclone_copyto/
# abr_rclone_valt_send_method: "copy" # Copy files from source to dest, skipping already copied https://rclone.org/commands/rclone_move/
# abr_rclone_valt_send_method: "sync" # Make source and dest identical, modifying destination only https://rclone.org/commands/rclone_sync/

abr_download_rclone_method: "copyto"

# @see https://rclone.org/docs/#environment-variables
# abr_bucket_enviroment:
#   RCLONE_YOUR_CUSTOM_VAR: "here."
#   RCLONE_ANOTHER_VAR: "here"

# Less common options
# @see https://dba.stackexchange.com/questions/99007/how-does-mydumpers-use-savepoints-option-reduce-metadata-locking

# Paranoid Mode ________________________________________________________________
# If enabled:
#    - run full-temp-backup-before-restore
#    - It will take additional time (it will backup all databases on target reserver)
#    - It may fill your disks (if your database is big and the target directory is on small disk)
# abr_paranoid: false

## Other variables _____________________________________________________________

abr_setup_mydumper_myloader: yes
abr_setup_rclone: yes
# abr_setup_abr_filesystem: yes
# abr_backup_disabled: no # Force disable backup, even if abr_mode: backup
# abr_restore_disabled: no  # Force disable backup, even if abr_mode: restore
# abr_valt_send_disabled: no
# abr_valt_receive_disabled: no
# abr_mode: "undefined-mode-select-backup-or-restore"

## Filesystem __________________________________________________________________

### Backup/restore step .......................................................
# If you dont want to store all backups on same base folder, you can customize
# here
# abr_pathprefix_local: "{{ abr_prefix }}" # DEPRECATED, REMOVE!
# abr_pathprefix_remote: "{{ abr_prefix }}" # DEPRECATED, REMOVE!
# # abr_backupdir: "{{ abr_name }}{{ (abr_summary_append_timestamp|bool) | ternary('__' + ansible_date_time.iso8601_basic_short, '')) }}"

# # # The default base dir respect Filesystem Hierarchy Standard 3.0
# # abr_dir_mydumpermyloader:
# #   # Default path: /var/local/abr/backups/{{ abr_pathprefix }}{{ abr_name }}/
# #   path: "{{ abr_dir_backup.path }}{{ abr_pathprefix_local }}{{ abr_backup_name }}/"
# #   owner: "{{ abr_fs_owner }}" # Default: root
# #   group: "{{ abr_internal_root_group }}" # Default: root/wheel
# #   mode: "{{ abr_fs_mode }}" # Default: "0700"
# #   state: directory
# #   recurse: yes
# #   # serole: ...
# #   # setype: ...
# #   # Check {{ role_path }}/tasks/setup-abr-filesystem/main.yml for all options!

### Setup step .................................................................

# With 'abr_setup_abr_filesystem: yes', abr_dirs is used to prepare local
# filesystem. You can append other directories here
abr_fs_dirs:
  - "{{ abr_dir_base }}"
  - "{{ abr_dir_temp }}"
  - "{{ abr_dir_bin }}"
  # - "{{ abr_dir_backup }}"
  # - "{{ abr_dir_mydumperdaemon }}"
  - "{{ abr_dir_paranoidmode }}"
  - "{{ abr_dir_abrlocalbucket }}"

# You do not plan to run always as root? Customize this
abr_fs_owner: "{{ abr_internal_root_user }}" # root
abr_fs_group: "{{ abr_internal_root_group }}" # root/wheel
abr_fs_mode: "0700"

# The default base dir respect Filesystem Hierarchy Standard 3.0
abr_dir_base:
  path: "/var/local/abr/"
  owner: "{{ abr_fs_owner }}"
  group: "{{ abr_fs_group }}"
  mode: "{{ abr_fs_mode }}"
  state: directory
  # recurse: yes
  # serole: ...
  # setype: ...
  # Check {{ role_path }}/tasks/setup-abr-filesystem/main.yml for all options!

abr_dir_temp:
  path: "{{ abr_dir_base.path }}temp/"
  owner: "{{ abr_fs_owner }}"
  group: "{{ abr_fs_group }}"
  mode: "{{ abr_fs_mode }}"
  state: directory

abr_dir_bin:
  path: "{{ abr_dir_base.path }}bin/"
  owner: "{{ abr_fs_owner }}"
  group: "{{ abr_fs_group }}"
  mode: "{{ abr_fs_mode }}"
  state: directory

# abr_dir_backup:
#   path: "{{ abr_dir_base.path }}backups/"
#   owner: "{{ abr_fs_owner }}"
#   group: "{{ abr_fs_group }}"
#   mode: "{{ abr_fs_mode }}"
#   state: directory

# # Not implemented, but the folder at least exist if you want to implement
# abr_dir_mydumperdaemon:
#   path: "{{ abr_dir_base.path }}mydumper-daemon"
#   owner: "{{ abr_fs_owner }}"
#   group: "{{ abr_fs_group }}"
#   mode: "{{ abr_fs_mode }}"
#   state: directory

abr_dir_paranoidmode:
  path: "{{ abr_dir_base.path }}full-temp-backup-before-restore/"
  owner: "{{ abr_fs_owner }}"
  group: "{{ abr_fs_group }}"
  mode: "{{ abr_fs_mode }}"
  state: directory

abr_dir_abrlocalbucket:
  path: "{{ abr_dir_base.path }}bucket/"
  owner: "{{ abr_fs_owner }}"
  group: "{{ abr_fs_group }}"
  mode: "{{ abr_fs_mode }}"
  state: directory

## ADVANCED ____________________________________________________________________

abr_command_mariadb_backup: "{{ abr__backup_mariadb_command }}"
abr_command_mariadb_restore: "{{ abr__restore_mariadb_command }}"
abr_command_mariadb_paranoidbackup: "{{ abr__paranoid_mariadb_command }}"

abr_command_restore_options: "{{ abr__restore_options_rclone_command }}"
abr_command_paranoid_options: "rclone lsd -R /var/local/abr/full-temp-backup-before-restore/"