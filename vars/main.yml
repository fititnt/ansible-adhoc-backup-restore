---

# FILE:            {{ role_path }}/vars/main.yml
# LICENSE:         Public Domain

abr_version: "v0.7.0"

abr__task_prefix: "Mode:{{ abr_mode | upper }} Bucket:'{{ abr_bucket | default(none) }}'"
# abr__task_suffix: ""

# abr_now DEPRECATED
# abr_now:
#   path: null
#   type: file
#   encrypted: false

abr__restore_uploaded_type: "file" # Options: 'file', 'directory' (e.g. uncompressed upload of several files)
abr__restore_decompressed_type: "directory" # Options: 'file', 'directory' (e.g. after decompress, what format will be)

abr__path: null
# abr__filename: "{{ abr_backup_name }}"
abr__extension: ""
abr__type: file
abr__temporary: false
abr__steps: []
abr__debug_messages: []

# my_host_all-databases_datetime
abr_default_summary: "{{ abr_uid + '__' + (abr_database | default('all-databases', true)) }}"

# myhostname__all-databases__20200213T052730
# abr_backup_name: "{{ abr_name }}{{ ((abr_timestamped|bool) | ternary('__' + ansible_date_time.iso8601_basic_short, '', '')) }}"
# abr_restore_name: "{{ abr_name }}{{ ((abr_restore_timestamp|bool) | ternary('__' + abr_restore_timestamp, '', '')) }}"
abr_backup_name: "{{ abr_name }}{{ ((abr_timestamped|bool) | ternary('__' + ansible_date_time.iso8601_basic_short, '', '')) }}"
abr_restore_name: "{{ abr_restore_uid }}"

abr_rclone_args_backup_string: "{{ abr_rclone_args_backup | to_json | regex_replace('\\:\\ ','=') | regex_replace('[\\[\\]{}\"]') | regex_replace('\\,\\ ',' ') }}"
abr_rclone_args_restore_string: "{{ abr_rclone_args_restore | to_json | regex_replace('\\:\\ ','=') | regex_replace('[\\[\\]{}\"]') | regex_replace('\\,\\ ',' ') }}"

# abr_internal_islocalbucket: "{{ abr_rclone_bucket == 'abr-local-bucket' }}"

### abr_backup_rclone_source: "{{ abr_dir_mydumpermyloader.path }}"
# abr_backup_rclone_source: "{{ abr_now.path }}"
abr_backup_rclone_source: "{{ abr__path }}"
# abr_backup_rclone_destiny: "{{ (abr_internal_islocalbucket!bool) | ternary(abr_dir_abrlocalbucket.path + abr_pathprefix_remote + abr_backup_name, '' }}"
abr_backup_rclone_destiny: "{{ abr_rclone_bucket_backup + abr_prefix + abr_backup_name + abr__extension }}"
abr_backup_rclone_command: "rclone {{ abr_rclone_valt_send_method }} {{ abr_rclone_args_backup_string }} {{ abr_backup_rclone_source }} {{ abr_backup_rclone_destiny }}"

# abr_restore_rclone_source: "{{ abr_dir_abrlocalbucket.path }}{{ abr_pathprefix_remote }}{{ abr_backup_name }}"
abr_restore_rclone_source: "{{ abr_rclone_bucket_backup + abr_prefix + abr_backup_name }}"
abr_restore_rclone_destiny: "{{ abr_dir_mydumpermyloader.path }}"
abr_restore_rclone_command: "rclone {{ abr_rclone_valt_receive_method }} {{ abr_rclone_args_restore_string }} {{ abr_backup_source }} {{ abr_backup_destiny }}"

abr_restore_options_rclone_command: "rclone lsd {{ abr_rclone_args_restore_string }} {{ abr_bucket + abr_prefix }}"

abr__download_rclone_default_source: "{{ abr_rclone_bucket_restore + abr_prefix + abr_backup_name + (abr_strategy_compression | ternary('.' + abr_compression_format, '')) }}"
abr__download_rclone_default_command: "rclone {{ abr_download_rclone_method }} {{ abr_rclone_args_restore_string }} {{ abr__download_rclone_default_source }} {{ abr__path }}"

abr_mydumper_outputdir: "{{ abr_dir_mydumpermyloader.path }}"
abr_myloader_diretory: "{{ abr_dir_mydumpermyloader.path }}"
# abr_mydumper_outputdir: "{{ abr_now.path }}"
# abr_myloader_diretory: "{{ abr_now.path }}"

# To allow be reused by other tools, we will use standard names
# @see https://www.tecmint.com/linux-password-protect-files-with-encryption/
abr_active_directory: ""
abr_active_file: ""
abr_active_isencrypted: false

abr_internal_root_user: 'root'
abr_internal_root_group: 'root'

abr_packages_mydumpermyloader:
  - mydumper

abr_packages_rclone:
  - rclone