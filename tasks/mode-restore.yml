---

# FILE:            {{ role_path }}/tasks/mode-restore.yml
# LICENSE:         Public Domain
# USAGE:
#                 abr_driver: 'restore'

# STEP 1: SETUP ________________________________________ (abr_skip_setup: false)
#         Setup step will create directories used by ABR and will install
#         dependencies based on enabled drivers and strategies
- name: "{{ abr__task_prefix }} | mode-restore | setup/main.yml"
  include: "{{ include_task_mode_restore_item }}"
  with_first_found:
    - "{{ abr_overrides_directory }}/tasks/setup/main.yml"
    - "{{ role_path }}/tasks/setup/main.yml"
  loop_control:
    loop_var: "include_task_mode_restore_item"
  when:
    - "(abr_skip_setup|bool is sameas false)"

# STEP 2: DOWNLOAD ______________________________ (abr_strategy_synchronization)
#         Data from remote (or local) bucket is downloaded
- name: "{{ abr__task_prefix }} | mode-restore | download/main.yml"
  include: "{{ include_task_mode_restore_item }}"
  with_first_found:
    - "{{ abr_overrides_directory }}/tasks/download/main.yml"
    - "{{ role_path }}/tasks/download/main.yml"
  loop_control:
    loop_var: "include_task_mode_restore_item"

# STEP 3: DECRYPT ____________________________________ (abr_strategy_encryption)
#         Files donwloaded that where encrypted (disabled by default) will be
#         decrypted on this step.
- name: "{{ abr__task_prefix }} | mode-restore | decrypt/main.yml"
  include: "{{ include_task_mode_restore_item }}"
  with_first_found:
    - "{{ abr_overrides_directory }}/tasks/decrypt/main.yml"
    - "{{ role_path }}/tasks/decrypt/main.yml"
  when:
    - "(abr_strategy_encryption is defined) and (abr_strategy_encryption)"
  loop_control:
    loop_var: "include_task_mode_restore_item"

# STEP 4: DECOMPRESS ________________________________ (abr_strategy_compression)
#         Files downloaded that where compressed (default) will be decompressed
#         at this step
- name: "{{ abr__task_prefix }} | mode-restore | decompress/main.yml"
  include: "{{ include_task_mode_restore_item }}"
  with_first_found:
    - "{{ abr_overrides_directory }}/tasks/decompress/main.yml"
    - "{{ role_path }}/tasks/decompress/main.yml"
  when:
    - "(abr_strategy_compression is defined) and (abr_strategy_compression)"
  loop_control:
    loop_var: "include_task_mode_restore_item"

# STEP 5: FULL-BACKUP-BEFORE-RESTORE ______________________ (abr_paranoid: true)
#         Files downloaded that where compressed (default) will be decompressed
#         at this step
- name: "{{ abr__task_prefix }} | mode-restore | full-temp-backup-before-restore/main.yml"
  include: "{{ include_task_mode_restore_item }}"
  with_first_found:
    - "{{ abr_overrides_directory }}/tasks/full-temp-backup-before-restore/main.yml"
    - "{{ role_path }}/tasks/full-temp-backup-before-restore/main.yml"
  when:
    - "abr_paranoid|bool"
  loop_control:
    loop_var: "include_task_mode_restore_item"

# STEP 5: DATA CONVERSION ____________________________ (abr_strategy_conversion)
#         This optimal and less frequent step may allow users to create own
#         rotines to implement data conversion (like an intermediate step to
#         convert an Oracle SQL dump to an MariaDB dump with sqlines)
- name: "{{ abr__task_prefix }} | mode-restore | data-conversion/main.yml"
  include: "{{ include_task_mode_restore_item }}"
  with_first_found:
    - "{{ abr_overrides_directory }}/tasks/data-conversion/main.yml"
    - "{{ role_path }}/tasks/data-conversion/main.yml"
  when:
    - "(abr_strategy_conversion is defined) and (abr_strategy_conversion)"
  loop_control:
    loop_var: "include_task_mode_restore_item"

# STEP 7: RESTORE MAIN TASK _______________________________________ (abr_driver)
#         On this step, abr_driver convert whatever will need backup/restore
#         to a format that other steps can undestand
- name: "{{ abr__task_prefix }} | mode-restore | restore/main.yml"
  include: "{{ include_task_mode_restore_item }}"
  with_first_found:
    - "{{ abr_overrides_directory }}/tasks/restore/main.yml"
    - "{{ role_path }}/tasks/restore/main.yml"
  loop_control:
    loop_var: "include_task_mode_restore_item"