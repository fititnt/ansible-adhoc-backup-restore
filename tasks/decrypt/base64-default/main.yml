---

# FILE:            {{ role_path }}/tasks/decrypt/base64-default/main.yml
# LICENSE:         Public Domain

- name: "{{ abr__task_prefix }} | decrypt | base64-default | prepare tempfolder"
  tempfile:
    state: file
    # suffix: "abr-decrypt-{{ abr_uid }}"
    suffix: "_decrypt_{{ abr__filename_full_now }}"
  register: abr_decrypt_temp

- name: "{{ abr__task_prefix }} | decrypt | base64-default | base64 -d < {{ abr__path | quote }} > {{ abr_decrypt_temp.path | quote }}, run"
  shell:
    # cmd: "base64 {{ abr__path | quote }} > {{ abr_decrypt_temp.path | quote }}"
    cmd: "base64 -d < {{ abr__path | quote }} > {{ abr_decrypt_temp.path | quote }}"
  register: command_result

# - name: "{{ abr__task_prefix }} | decrypt | base64-default | decrypt {{ abr__path }} on {{ abr_decrypt_temp.path }}"
#   archive:
#     path: "{{ abr__path }}/"
#     #dest: "{{ abr_mydumper_outputdir }}.xz"
#     dest: "{{ abr_decrypt_temp.path }}"
#     format: "{{ abr_decryption_format }}"
#     # force_archive: yes
#     # remove: yes
#   register: archive_command_result

# - name: "{{ abr__task_prefix }} | decrypt | base64-default | run mydumper"
#   shell: >
#     mydumper
#     --outputdir='{{ abr_decrypt_tempfolder.path }}'
#     {{ abr_mydumper_append | default('') }}
#   register: mydumper_command_result

- name: "{{ abr__task_prefix }} | decrypt | base64-default | set_facts: prepare for next step"
  set_fact:
    abr__steps: "{{ abr__steps | default([] + ['decrypt/base64-default']) }}"
    abr__path: "{{ abr_decrypt_temp.path }}"
    # abr__filename: "{{ abr__filename + '.xz' }}"
    abr__extension: "{{ (abr__extension | default('') ) + '.' + abr__encryption_extension }}"
    abr__type: "file"
